import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from config_reader import config
from random import choice

logging.basicConfig(level=logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot = Bot(token=config.bot_token.get_secret_value())  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –≤—ã —Ç—É—Ç –º–æ–∂–µ—Ç–µ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è "
                        "–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –Ω–æ —ç—Ç–æ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∞ –ø–æ–∫–∞..."
                        " —Å—ã–≥—Ä–∞–µ–º –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏?\n", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–î–∞")
async def with_yes(message: types.Message):
    global button
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    button = []
    for i in range(1, 10):
        button_num = types.InlineKeyboardButton(" ", callback_data=f"place_{i}")
        button.append(button_num)
    keyboard.add(*button)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü–æ–≥–Ω–∞–ª–∏ \n ")
    await message.answer(f"–ü—Ä–æ–≤–æ–¥–∏–º –∂–µ—Ä–µ–±—å–µ–≤–∫—É...üé≤")
    players = [bot, message.from_user.first_name]
    global moves_order
    global move_options
    global bot_combos
    global user_combos
    user_combos, bot_combos = [], []
    move_options = list(range(1, 10))
    print(f"–≠—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ {move_options}")
    moves_order = [choice(players)]
    [moves_order.append(i) for i in players if i not in moves_order]
    moves_order.append(["X", "0"])
    if moves_order[0] == message.from_user.first_name:
        global mark_bot
        mark_bot = None
        await message.answer(f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –≤–∞–º–∏", reply_markup=keyboard)
    else:
        first_move = choice(move_options)
        bot_combos.append(first_move)
        move_options.remove(first_move)
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        mark_bot = "–•"
        for enum, i in enumerate(button):
            if enum == first_move - 1:
                button_num = types.InlineKeyboardButton(mark_bot, callback_data=f"forbidden")
                button[enum] = button_num
                break
            else:
                continue
        keyboard.add(*button)
        # keyboard.add(*new_keyboard(callback_place, "–•", "forbidden"))
        await message.answer(f"–ü–µ—Ä–≤—ã–º —Ö–æ–∂—É —è!", reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="place_"))
async def tic_tac_toe_mark(callback_place: types.CallbackQuery):
    winner = False
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    mark = "O" if moves_order.index(callback_place.from_user.first_name) == 1 else "X"
    user_combos.append(int(callback_place.data.split("_")[1]))  # –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É, –Ω–∞–∂–∞—Ç—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–ø–∏—Å–æ–∫
    move_options.remove(int(callback_place.data.split("_")[1]))  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    for enum, i in enumerate(button):
        if enum == int(callback_place.data.split("_")[1]) - 1:
            button_num = types.InlineKeyboardButton(mark, callback_data=f"forbidden")
            button[enum] = button_num
            break
        else:
            continue
    keyboard.add(*button)
    await callback_place.message.edit_reply_markup(reply_markup=keyboard)
    if check4win(user_combos):
        winner = True
        await callback_place.message.answer(f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ["–î–∞", "–ù–µ—Ç"]
        keyboard.add(*buttons)
        await callback_place.message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=keyboard)
        # —Å—Ç–∏–∫–µ—Ä –±—ã —Å—é–¥–∞
    else:
        await asyncio.sleep(1)
        # –±–æ—Ç –¥–µ–ª–∞–µ—Ç —Ö–æ–¥
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        bot_move = choice(move_options)
        bot_combos.append(bot_move)
        move_options.remove(bot_move)
        mark_bot = "X" if mark == "O" else "O"
        for enum, i in enumerate(button):
            if enum == bot_move - 1:
                button_num = types.InlineKeyboardButton(mark_bot, callback_data=f"forbidden")
                button[enum] = button_num
                break
            else:
                continue
        keyboard.add(*button)
        await callback_place.message.edit_reply_markup(reply_markup=keyboard)
        print(bot_combos)
        if check4win(bot_combos):
            winner = True
            await callback_place.message.answer(f'–Ø –≤—ã–∏–≥—Ä–∞–ª!')
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = ["–î–∞", "–ù–µ—Ç"]
            keyboard.add(*buttons)
            await callback_place.message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=keyboard)
            # —Å—Ç–∏–∫–µ—Ä –±—ã —Å—é–¥–∞
        else:
            await callback_place.answer(f"–ñ–¥—É –≤–∞—à —Ö–æ–¥")


@dp.callback_query_handler(Text("forbidden"))
async def no_mark(callback_answ: types.CallbackQuery):
    await callback_answ.answer(f"–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)


@dp.message_handler(lambda message: message.text == "–ù–µ—Ç")
async def with_no(message: types.Message):
    await message.answer("–í –¥—Ä—É–≥–æ–π —Ä–∞–∑...", reply_markup=types.ReplyKeyboardRemove())


def check4win(array):  # –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞—á–∏
    """–ø–æ–±–µ–¥–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
    if len(array) >= 3:
        combos = [[1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9],
                  [1, 4, 7],
                  [2, 5, 8],
                  [3, 6, 9],
                  [1, 5, 9],
                  [3, 5, 7]]
        for combo in combos:
            if (combo[0] in array) and (combo[1] in array) and (combo[2] in array):
                return True
    else:
        return False


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot, reset_webhook=True)


if __name__ == "__main__":
    asyncio.run(main())
